<%- include("../../views/partials/user/header") %>
<link href="/css/myaccount.css" rel="stylesheet" type="text/css">
<div class="main-content">
<div class="account-container">
    <div class="sidebar">
        <ul>
            <li class="active" onclick="showSection('profile')">My Profile</li>
            <li onclick="showSection('address')">My Address</li>
            <li onclick="showSection('wallet')">My Wallet</li>
            <li onclick="showSection('orders');loadOrders()">My Orders</li>
            <li onclick="showSection('refer')">Refer & Earn</li>

            <li><a href="/logout">Logout</a></li>
        </ul>
    </div>

    <div class="account-content">
        <!-- My Profile Section (Default) -->
        <div id="profile" class="account-section">
            <h2>My Profile</h2>
            <div class="profile-info">
                <p><strong>Name:</strong> <span><%= user.name %></span></p>
                <p><strong>Email:</strong> <span><%= user.email %></span></p>
                <p><strong>Phone:</strong> <span><%= user.phone || 'Not provided' %></span></p>
            </div>
            <div class="profile-actions">
                <a href="/editprofile" class="edit-btn">Edit Profile</a>
            </div>
        </div>

        <div id="address" class="account-section" style="display: none;">
            <h2>My Address</h2>
        
            <!-- Address List (Initially Empty, Will Be Loaded Dynamically) -->
            <div id="addressList">
                <p>Loading addresses...</p>
            </div>
        
            <!-- Add New Address Button (Redirect to New Page) -->
            <a href="/addnewaddress" class="add-btn">Add New Address</a>
        </div>
        
        <!-- My Wallet Section -->
        <div id="wallet" class="account-section" style="display: none;">
            <h2>My Wallet</h2>
            <p>Wallet balance and transactions will be shown here.</p>
        </div>

        <!-- My Orders Section -->
        <div id="orders"  class="account-section" style="display: none; ">
          
        </div>
    
    <!-- Refer & Earn Section -->
<div id="refer" class="account-section" style="display: none;">
    <h2>Refer & Earn</h2>
    <p>Invite your friends and earn rewards when they sign up!</p>
    
    <% if (user.referralToken) { %>
        <div class="referral-container">
            <input type="text" id="referralLink" readonly value="<%= `http://localhost:3000/signup?ref=${user.referralToken}` %>">

            <button onclick="copyReferralLink()">Copy Link</button>
        </div>

        <button class="invite-email" onclick="inviteViaEmail()">Invite via Email</button>
    <% } else { %>
        <p style="color: red;">Referral link not available.</p>
    <% } %>
</div>

</div>
</div>
<script>
    function showSection(section) {
        document.querySelectorAll('.account-section').forEach(sec => sec.style.display = 'none');
        document.getElementById(section).style.display = 'block';

        document.querySelectorAll('.sidebar ul li').forEach(item => item.classList.remove('active'));
        event.target.classList.add('active');
    }

    document.addEventListener("DOMContentLoaded", async function () {
    if (document.getElementById("address")) {
        loadAddresses();
    }
    if (document.getElementById("orders")) {
        loadOrders();
    }
    if (document.getElementById("wallet")) {
        loadWalletBalance();
    }
});

// Fetch and Display Addresses
async function loadAddresses() {
    try {
        const response = await fetch("/getaddresses");
        const data = await response.json();
        const addressList = document.getElementById("addressList");

        if (data.success && data.addresses.length > 0) {
            addressList.innerHTML = ""; // Clear previous content
            data.addresses.forEach((address) => {
                const isDefault = address.isDefault ? " (Default)" : "";
                const defaultClass = address.isDefault ? "default-address" : ""; // Add a class for styling

                addressList.innerHTML += `
                    <div class="address-item ${defaultClass}">
                        <p><strong>House Number:</strong> ${address.houseNumber}</p>
                        <p><strong>Street:</strong> ${address.street}</p>
                        <p><strong>City:</strong> ${address.city}</p>
                        <p><strong>State:</strong> ${address.state}</p>
                        <p><strong>Pincode:</strong> ${address.pincode}</p>
                        <div class="address-actions">
                            <button class="edit-btn" onclick="redirectToEdit('${address._id}')">Edit</button>
                            <button class="delete-btn" onclick="deleteAddress('${address._id}')">Delete</button>
                            ${
                                !address.isDefault
                                    ? `<button class="set-default-btn" onclick="setAsDefault('${address._id}')">Set as Default</button>`
                                    : `<span class="default-label">Default Address</span>`
                            }
                        </div>
                    </div>
                `;
            });
        } else {
            addressList.innerHTML = "<p>No addresses found.</p>";
        }
    } catch (error) {
        console.error("Error fetching addresses:", error);
        document.getElementById("addressList").innerHTML = "<p>Error loading addresses.</p>";
    }
}

async function loadWalletBalance() {
    try {
        const response = await fetch("/wallet-balance");
        const data = await response.json();
        const walletSection = document.getElementById("wallet");

        if (data.success) {
            walletSection.innerHTML = `
                <h2>My Wallet</h2>
                <div class="wallet-box">
                    <p>Your Wallet Balance:</p>
                    <h3>₹${data.amount.toFixed(2)}</h3>
                </div>
            `;
            await loadTransactions(); 

        } else {
            walletSection.innerHTML = "<p>Error fetching wallet balance.</p>";
        }
    } catch (error) {
        console.error("Error fetching wallet balance:", error);
        document.getElementById("wallet").innerHTML = "<p>Error loading wallet balance.</p>";
    }
}


async function loadTransactions() {
  try {
    const response = await fetch("/wallet-transactions");  // Fetch all transactions without pagination
    const data = await response.json();

    const walletSection = document.getElementById("wallet");

    if (data.success) {
      // Build the transaction table
      let tableHTML = `
        <h3>Transaction History</h3>
        <table>
          <thead>
            <tr>
              <th>Date</th>
              <th>Amount</th>
              <th>Type</th>
              <th>Source</th>
              <th>Order ID</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
      `;

      data.transactions.forEach(transaction => {
        let orderLink = 'N/A'; // Default value when no order is associated
        let actionButton = ''; // Default empty button

        // If the transaction is a "Credit" and has an associated orderId, create a button
        if (transaction.type === 'Credit' && transaction.orderId) {
          orderLink = transaction.orderId._id;
          actionButton = `<button onclick="window.location.href='/order/${orderLink}'">View Order</button>`;
        }

        tableHTML += `
          <tr>
            <td>${new Date(transaction.createdAt).toLocaleDateString()}</td>
            <td>₹${transaction.amount.toFixed(2)}</td>
            <td>${transaction.type}</td>
            <td>${transaction.source}</td>
           <td>${transaction.orderId ? transaction.orderId.orderID : 'N/A'}</td>
            <td>${actionButton}</td>
          </tr>
        `;
      });

      tableHTML += `</tbody></table>`;

      walletSection.innerHTML += tableHTML; // Append the transaction table below wallet balance
    } else {
      walletSection.innerHTML += "<p>No transactions found.</p>";
    }
  } catch (error) {
    console.error("Error loading transactions:", error);
    document.getElementById("wallet").innerHTML = "<p>Error loading transactions.</p>";
  }
}


async function loadOrders() {
    try {
        const response = await fetch("/orders", { headers: { "X-Requested-With": "XMLHttpRequest" } });
        const data = await response.text();
        document.getElementById("orders").innerHTML = data;
    } catch (error) {
        console.error("Error fetching orders:", error);
        document.getElementById("orders").innerHTML = "<p>Error loading orders.</p>";
    }
}


function redirectToEdit(addressId) {
    window.location.href = `/editaddress/${addressId}`;
}

// Set as Default Function
async function setAsDefault(addressId) {
    try {
        const response = await fetch(`/setdefaultaddress/${addressId}`, { method: "POST" });
        const data = await response.json();

        if (data.success) {
            alert("Address set as default successfully!");
            loadAddresses(); // Reload address list after setting default
        } else {
            alert("Failed to set default address: " + data.message);
        }
    } catch (error) {
        console.error("Error setting default address:", error);
        alert("An error occurred while setting the default address.");
    }
}

// Delete Address Function
async function deleteAddress(addressId) {
    if (!confirm("Are you sure you want to delete this address?")) return;

    try {
        const response = await fetch(`/deleteaddress/${addressId}`, { method: "DELETE" });
        const data = await response.json();

        if (data.success) {
            alert("Address deleted successfully!");
            loadAddresses(); // Reload address list after deletion
        } else {
            alert("Failed to delete address: " + data.message);
        }
    } catch (error) {
        console.error("Error deleting address:", error);
        alert("An error occurred while deleting the address.");
    }
}
function copyReferralLink() {
    let linkInput = document.getElementById("referralLink");
    linkInput.select();
    document.execCommand("copy");
    
    Swal.fire({
        icon: "success",
        title: "Copied!",
        text: "Referral link copied to clipboard.",
        timer: 2000,
        showConfirmButton: false
    });
}

function inviteViaEmail() {
    let referralLink = document.getElementById("referralLink").value;
    Swal.fire({
        title: "Enter Email",
        input: "email",
        inputPlaceholder: "Enter email to invite",
        showCancelButton: true,
        confirmButtonText: "Send Invite",
        cancelButtonText: "Cancel"
    }).then((result) => {
        if (result.isConfirmed && result.value) {
            fetch("/send-invite", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ email: result.value, referralLink })
            })
            .then(response => response.json())
            .then(data => {
                Swal.fire({
                    icon: data.success ? "success" : "error",
                    title: data.success ? "Success!" : "Error!",
                    text: data.message
                });
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire({
                    icon: "error",
                    title: "Oops!",
                    text: "Something went wrong. Please try again."
                });
            });
        }
    });
}

</script>

<%- include("../../views/partials/user/footer") %>
