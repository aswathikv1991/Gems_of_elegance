<%- include("../../views/partials/user/header") %>
<link href="/css/prodetail.css" rel="stylesheet" type="text/css" media="all" />

<div class="product-detail-container">
    <div class="row">
        <div class="col-md-6">
            <div class="image-slider">
                <% product.image.forEach((image, index) => { %>
                    <img src="<%= image %>" class="product-image <%= index === 0 ? 'active' : '' %>">
                <% }) %>
            </div>
        </div>

        <div class="col-md-6 product-info">
            <h2><%= product.name %></h2>
            <p>
                <% if (product.discountPrice < product.price) { %>
                    Price: <span style="text-decoration: line-through; color: grey;">₹<%= product.price %></span> 
                    <span style="color: red; font-weight: bold;">₹<%= product.discountPrice %></span>
                <% } else { %>
                    Price: <span style="color: black; font-weight: bold;">₹<%= product.price %></span>
                <% } %>
            </p>
            <p><strong>Material:</strong> <%= product.material %></p>
            <p><strong>Color:</strong> <%= product.color %></p>
            <p><strong>Description:</strong> <%= product.description %></p>
            <p><strong>Stock Status:</strong> <%= product.quantity %></p>
            <button class="btn-primary" <%= product.quantity === 'Out of Stock' ? 'disabled' : '' %>>
                Add to Cart
            </button>
            <button class="btn-secondary add-to-wishlist" data-product-id="<%= product._id %>">
                Add to Wishlist
            </button>
            
        </div>
    </div>
</div>
<div id="reviews-section">
    <h2>Customer Reviews</h2>

    <div id="reviews-container">
        <% if (reviews.length > 0) { %>
            <% reviews.forEach(review => { %>
                <div class="review">
                    <p><strong class="review-user"><%= review.userId.name %></strong> 
                        <span class="review-date">(<%= new Date(review.createdAt).toLocaleDateString() %>)</span>
                    </p>
                    <p class="review-rating">Rating: ⭐<%= review.rating %></p>
                    <p class="review-comment"><%= review.comment %></p>
                </div>
            <% }); %>
        <% } else { %>
            <p class="no-reviews">No reviews yet. Be the first to leave a review!</p>
        <% } %>
    </div>
</div>


<div id="add-review-section" class="review-container" >
    <h3 class="review-heading">Add Your Review</h3>
    <textarea id="review-comment" placeholder="Write your review here..." required></textarea>
    
    <div class="rating-container">
        <label for="review-rating">Rating:</label>
        <select id="review-rating">
            <option value="" disabled selected>Choose rating</option>
            <option value="5">⭐⭐⭐⭐⭐ (5)</option>
            <option value="4">⭐⭐⭐⭐ (4)</option>
            <option value="3">⭐⭐⭐ (3)</option>
            <option value="2">⭐⭐ (2)</option>
            <option value="1">⭐ (1)</option>
        </select>
    </div>

    <button id="submit-review-btn">Submit Review</button>
</div>



<!-- Reviews Section 
<div class="reviews-section">
    <h3>Customer Reviews</h3>
    <div id="reviews-container">
        <p>Loading reviews...</p>
    </div>
</div>-->

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const productId = "<%= product._id %>"; // Ensure productId is only declared once

        // Image Slider
        const images = document.querySelectorAll(".image-slider img");
        let index = 0;
        if (images.length > 0) {
            images.forEach(img => img.classList.remove("active"));
            images[index].classList.add("active");
            setInterval(() => {
                images.forEach(img => img.classList.remove("active"));
                index = (index + 1) % images.length;
                images[index].classList.add("active");
            }, 2000);
        }

        // Zoom functionality
        const zoomedImg = document.createElement("img");
        zoomedImg.classList.add("zoomed-img");
        document.body.appendChild(zoomedImg);

        const overlay = document.createElement("div");
        overlay.classList.add("zoom-overlay");
        document.body.appendChild(overlay);

        images.forEach(img => {
            img.addEventListener("click", () => {
                zoomedImg.src = img.src;
                zoomedImg.style.display = "block";
                overlay.style.display = "block";
            });
        });

        overlay.addEventListener("click", () => {
            zoomedImg.style.display = "none";
            overlay.style.display = "none";
        });

        // Wishlist Functionality
        document.addEventListener("click", function (event) {
            if (event.target.classList.contains("add-to-wishlist")) {
                //console.log("Wishlist button clicked!");
                const productId = event.target.getAttribute("data-product-id");

                fetch("/check-login-status")
                    .then(response => response.json())
                    .then(data => {
                        if (!data.loggedIn) {
                            Swal.fire({
                                title: "Login Required",
                                text: "You need to log in to add items to your wishlist.",
                                icon: "warning",
                                showCancelButton: true,
                                confirmButtonText: "Login",
                                cancelButtonText: "Cancel"
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = "/login";
                                }
                            });
                        } else {
                            fetch("/wishlist/add", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ productId })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire("Success", "Item added to wishlist!", "success");
                                } else {
                                    Swal.fire("Info", data.message, "info");
                                }
                            })
                            .catch(error => {
                                console.error("Error adding to wishlist:", error);
                                Swal.fire("Error", "Something went wrong", "error");
                            });
                        }
                    })
                    .catch(error => console.error("Error checking login status:", error));
            }
        });

        // Add to Cart Functionality
        const addToCartBtn = document.querySelector(".btn-primary");
        if (addToCartBtn) {
            addToCartBtn.addEventListener("click", function () {
                const quantity = 1; 
                fetch("/check-login-status")
                    .then(response => response.json())
                    .then(data => {
                        if (!data.loggedIn) {
                            Swal.fire({
                                title: "Login Required",
                                text: "You need to log in to add items to your cart.",
                                icon: "warning",
                                showCancelButton: true,
                                confirmButtonText: "Login",
                                cancelButtonText: "Cancel"
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = "/login";
                                }
                            });
                        } else {
                            fetch("/cart/add", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ productId, quantity })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire("Success", "Item added to your cart!", "success");
                                } else {
                                    
                                    Swal.fire("Error", data.message, "error");
                                }
                            })
                            .catch(error => {
                                console.error("Error adding to cart:", error);
                                Swal.fire("Error", "Something went wrong while adding to the cart.", "error");
                            });
                        }
                    })
                    .catch(error => {
                        console.error("Error checking login status:", error);
                        Swal.fire("Error", "Unable to check login status.", "error");
                    });
            });
        }

        // Load Reviews
      /*  const reviewsContainer = document.getElementById("reviews-container");
        function loadReviews() {
            reviewsContainer.innerHTML = "<p>Loading reviews...</p>";
            fetch(`/reviews/${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        reviewsContainer.innerHTML = "";
                        if (data.reviews.length > 0) {
                            data.reviews.forEach(review => {
                                const reviewElement = document.createElement("div");
                                reviewElement.classList.add("review");
                                reviewElement.innerHTML = `
                                    <p><strong>${review.user.name}</strong> (${new Date(review.createdAt).toLocaleDateString()})</p>
                                    <p>Rating: ⭐${review.rating}</p>
                                    <p>${review.comment}</p>
                                `;
                                reviewsContainer.appendChild(reviewElement);
                            });
                        } else {
                            reviewsContainer.innerHTML = "<p>No reviews yet.</p>";
                        }
                    } else {
                        reviewsContainer.innerHTML = "<p>Failed to load reviews.</p>";
                    }
                })
                .catch(error => {
                    console.error("Error fetching reviews:", error);
                    reviewsContainer.innerHTML = "<p>Error loading reviews.</p>";
                });
        }

        loadReviews();
   */
    async function checkReviewEligibility(productId) {
        const response = await fetch(`/can-review/${productId}`);
        const data = await response.json();

        if (data.canReview) {
            document.getElementById("add-review-section").style.display = "block";
        }
    }

  
    checkReviewEligibility("<%= product._id %>");
    document.getElementById("submit-review-btn").addEventListener("click", submitReview);
    
})
async function submitReview() {
    const productId = "<%= product._id %>";
    const comment = document.getElementById("review-comment").value;
    const rating = document.getElementById("review-rating").value;

    if (!comment || !rating) {
        alert("Please provide both a comment and a rating!");
        return;
    }

    try {
        const response = await fetch("/submit-review", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ productId, comment, rating }),
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: "success",
                title: "Review Added!",
                text: "Your review has been submitted successfully.",
            });

            // Clear input fields
            document.getElementById("review-comment").value = "";
            document.getElementById("review-rating").value = "";

            // Dynamically update the reviews section without reloading
            const reviewsContainer = document.getElementById("reviews-container");
            const newReviewElement = document.createElement("div");
            newReviewElement.classList.add("review");
            newReviewElement.innerHTML = `
                <p><strong>${data.review.userId.name}</strong> (${new Date().toLocaleDateString()})</p>
                <p>Rating: ⭐${data.review.rating}</p>
                <p>${data.review.comment}</p>
            `;
            reviewsContainer.prepend(newReviewElement); // Add new review at the top
        } else {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message,
            });
        }
    } catch (error) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Something went wrong while submitting your review.",
        });
    }
}
</script>


<%- include("../../views/partials/user/footer") %>
