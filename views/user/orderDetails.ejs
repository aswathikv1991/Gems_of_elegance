<%- include("../../views/partials/user/header") %>
<link rel="stylesheet" href="/css/orderdetail.css"> <!-- Add your CSS file -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<div class="order-details-page">
    <div class="container">
        <h2>Order Details</h2>

        <p><strong>Order ID:</strong> <%= order.orderID %></p>
        <p><strong>Date:</strong> <%= new Date(order.createdAt).toLocaleDateString() %></p>
        <p><strong>Status:</strong> <%= order.orderStatus %></p>
        <p><strong>Total Amount:</strong> ‚Çπ<%= order.totalAmount.toFixed(2) %></p>

        <h3>Items:</h3>
        <table>
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>SalePrice</th>
                    <th>Subtotal</th>
                    <th>Status</th> <!-- Added Status Column -->

                    <% if (order.orderStatus === "pending" || order.orderStatus === "processing") { %>
                        <th>Cancel</th>
                    <% } %>
                    <th>Return</th> <!-- Added Return Column -->
                </tr>
            </thead>
            <tbody>
                <% order.items.forEach(item => { %>
                    <tr>
                        <td><%= item.productId.name %></td>
                        <td><%= item.quantity %></td>
                        <td>‚Çπ<%= item.price.toFixed(2) %></td>
                        <td>‚Çπ<%= item.salePrice.toFixed(2) %></td>
                        <td>‚Çπ<%= (item.salePrice).toFixed(2) %></td>
                        
                        <td>
                            <% if (item.status === "cancelled") { %>
                                <span class="text-danger">Cancelled</span> <!-- üö® Display cancelled status -->
                            <% } else { %>
                                <span class="text-success">Confirmed</span> <!-- Show "Confirmed" -->
                            <% } %>
                        </td>
                        <% if (order.orderStatus === "pending" || order.orderStatus === "processing") { %>
                            <td>
                                <% if (item.status !== "cancelled") { %>
                                    <input type="checkbox" name="cancelProducts" value="<%= item.productId._id %>">
                                <% } else { %>
                                    <span class="text-muted">N/A</span> <!-- üö´ No cancel option for cancelled items -->
                                <% } %>
                            </td>
                        <% } %>
                        <td>
                            <% if (order.orderStatus === "delivered" && item.returnApprovalStatus ==="no_return") { %>
                                <button onclick="requestReturn('<%= order.orderID %>', '<%= item.productId._id %>')" class="btn btn-warning">
                                    Request Return
                                </button>
                            <% } else if (item.returnApprovalStatus === "pending") { %>
                                <span class="text-warning">Return Pending</span>
                            <% } else if (item.returnApprovalStatus === "approved") { %>
                                <span class="text-success">Return Approved</span>
                            <% } else if (item.returnApprovalStatus === "rejected") { %>
                                <span class="text-danger">Return Rejected</span>
                            <% } else { %>
                                <span class="text-muted">No Return Available</span>
                            <% } %>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>

        <!-- Cancel Order Section -->
        <% if (order.orderStatus === "pending" || order.orderStatus === "processing") { %>
            <div class="cancel-section">
                <h3>Cancel Order</h3>
                <textarea id="cancelReason" placeholder="Enter cancellation reason"></textarea>
                <button onclick="cancelOrder('<%= order.orderID %>')" class="btn btn-danger">
                    Cancel Selected Items</button>
            </div>
        <% } %>

        <a href="/orders" class="btn btn-secondary">‚¨Ö Back to Orders</a>
        <a href="/download-invoice/<%= order._id %>" class="btn btn-primary">

            üìÑ Download Invoice
        </a>

        <% if (order.paymentStatus === "pending" && order.paymentMethod !== "cod") { %>
            <button type="button" class="btn btn-warning" onclick="showPaymentOptions()">üîÅ Retry Payment</button>
        
            <!-- Payment Options (initially hidden) -->
            <div id="paymentOptions" style="display: none; margin-top: 15px;">
                <label><input type="radio" name="paymentMethod" value="cod" onchange="showProceedBtn()"> Cash on Delivery</label><br>
                <label><input type="radio" name="paymentMethod" value="razorpay" onchange="showProceedBtn()"> Razorpay</label><br>
                <label><input type="radio" name="paymentMethod" value="wallet" onchange="showProceedBtn()"> Wallet</label><br><br>
        
                <!-- Proceed Button -->
                <button type="button" class="btn btn-success" id="proceedBtn" style="display: none;"
                    onclick="submitPayment('<%= order._id %>', '<%= Number(order.totalAmount).toFixed(2) %>')">
                    ‚úÖ Proceed
                </button>
            </div>
        <% } %>
        
    </div>
</div>

<script>
function cancelOrder(orderId) {
    const selectedProducts = [];
    document.querySelectorAll('input[name="cancelProducts"]:checked').forEach(checkbox => {
        selectedProducts.push(checkbox.value);
    });

    if (selectedProducts.length === 0) {
        Swal.fire({
            title: "Warning!",
            text: "Please select at least one item to cancel.",
            icon: "warning",
            confirmButtonText: "OK"
        });
        return;
    }

    const cancelReason = document.getElementById("cancelReason").value.trim();
    if (!cancelReason) {
        Swal.fire({
            title: "Required!",
            text: "Please provide a cancellation reason.",
            icon: "warning",
            confirmButtonText: "OK"
        });
        return;
    }

    fetch("/order/cancel", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ orderId, cancelProducts: selectedProducts, cancelReason })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                title: "Cancelled!",
                text: "Order cancellation successful!",
                icon: "success",
                confirmButtonText: "OK"
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                title: "Error!",
                text: data.message,
                icon: "error",
                confirmButtonText: "OK"
            });
        }
    })
    .catch(error => {
        console.error("Error cancelling order:", error);
        Swal.fire({
            title: "Error!",
            text: "An error occurred. Please try again.",
            icon: "error",
            confirmButtonText: "OK"
        });
    });
}


function requestReturn(orderId, productId) {
    Swal.fire({
        title: "Return Request",
        input: "text",
        inputPlaceholder: "Please enter your reason for return",
        showCancelButton: true,
        confirmButtonText: "Submit",
        cancelButtonText: "Cancel",
        inputValidator: (value) => {
            if (!value.trim()) {
                return "Return reason is required!";
            }
        }
    }).then((result) => {
        if (result.isConfirmed) {
            fetch("/request-return", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ orderId, productId, returnReason: result.value })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: "Success!",
                        text: "Return request submitted successfully!",
                        icon: "success",
                        confirmButtonText: "OK"
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: "Failed!",
                        text: data.message,
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                }
            })
            .catch(error => {
                console.error("Error submitting return request:", error);
                Swal.fire({
                    title: "Error!",
                    text: "An error occurred. Please try again.",
                    icon: "error",
                    confirmButtonText: "OK"
                });
            });
        }
    });
}


function showPaymentOptions() {
    document.getElementById("paymentOptions").style.display = "block";
}

function showProceedBtn() {
    document.getElementById("proceedBtn").style.display = "inline-block";
}



async function submitPayment(orderId, totalAmount) {
            try {
                const selectedMethod = document.querySelector('input[name="paymentMethod"]:checked');
                if (selectedMethod) {
                    //alert("Selected Payment Method: " + selectedMethod.value);
                    //const orderId= order.orderID
                    console.log("orderid*****", orderId)

                    if (selectedMethod.value == "razorpay") {
                        const orderDetails = { totalAmount: totalAmount, orderId }
                        const razorresult = await initiateRazorpayPayment(orderDetails)
                    }
                    else {
                        const paymentDetails = { paymentMethod: selectedMethod.value, orderId }
                        await updatePaymentDetails(paymentDetails)
                    }

                } else {
                    alert("Please select a payment method.");
                }
            }
            catch (error) {
                console.log("error at retry payment", error)
            }
        }



        async function initiateRazorpayPayment(orderDetails) {
            try {
                let keyResponse = await fetch("/get-razorpay-key");
                let keyData = await keyResponse.json();

                // Step 1: Create a Razorpay order
                let response = await fetch("/create-razorpay-order", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ amount: orderDetails.totalAmount }) // Send total amount to backend
                });

                let razorpayOrder = await response.json();
                if (!razorpayOrder.success) {
                    alert("Failed to initiate payment. Please try again.");
                    return;
                }


                let razorpayOptions = {
                    key: keyData.key, // Replace with your Razorpay key
                    amount: razorpayOrder.amount,
                    currency: "INR",
                    name: "gems of elegance",
                    description: "Order Payment",
                    order_id: razorpayOrder.order.id,
                    handler: async function (response) {
                        // Step 2: Payment Success - Verify with backend
                        //console.log("razor***********",response)
                        let verifyResponse = await fetch("/razorpay/verify-payment", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature,

                            })
                        });

                        let verifyResult = await verifyResponse.json();
                        if (verifyResult.success) {
                            // Step 3: Payment Verified - Place the Order
                            const paymentDetails = {
                                paymentId: response.razorpay_payment_id,
                                razorpayorderId: response.razorpay_order_id,

                                orderId: orderDetails.orderId,
                                paymentMethod: "razorpay"

                            };
                            
                            console.log("return paymentdetails", paymentDetails)
                            await updatePaymentDetails(paymentDetails)
                        } else {
                            alert("Payment verification failed. Please contact support.");
                        }
                    },
                    theme: {
                        color: "#F37254"
                    }
                };

                let razorpayInstance = new Razorpay(razorpayOptions);
                razorpayInstance.open();

                razorpayInstance.on("payment.failed", function (response) {
                    alert("Payment failed. Please try again.");
                    console.log(response);
                    location.href = `/order-success/${orderDetails.orderId}?message=PAYMENT_ERROR`;
                });

            } catch (error) {
                console.error("Error in Razorpay payment:", error);
                alert("Something went wrong. Please try again later.");
            }
        }
        async function updatePaymentDetails(paymentDetails) {
            const response = await fetch("/update-payment-details", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(paymentDetails)
            });
            let result = await response.json();
            console.log("Result:", result);
            if (result.success) {
                Swal.fire({
                    title: "Payment Completed ",
                    text: "Payment has been completed successfully.",
                    icon: "success",
                    confirmButtonText: "OK"
                }).then(() => {
                    location.href = `/order-success/${paymentDetails.orderId}`;
                });
            } else {
              
                    location.href = `/order-success/${paymentDetails.orderId}?message=${result.message}`;
                }
                
            }
        


</script>

<%- include("../../views/partials/user/footer") %>
